###### DOCKER INTRO ###########
##https://gokhansengun.com/docker-nedir-nasil-calisir-nerede-kullanilir/ docker giriş için okunmalı
DOCKER
Dockerfile environment config
image dockerfile a göre oluşur
image readonlydir -gerekli environmentların ve dependencylerin sağlandığı publish edilmiş çalışmaya hazır uygulamayı barındırır

Container ile imageler çalışabilir hale gelir.
Container -- image üzerinden uygulamayı ayağa kaldırır 1 image ile 1 den fazla container çalıştırılabilir.
image i taslak olarak düşünebiliriz containerlarda bu image in çalışan instancelarıdır.
-------------------
image dockerfile daki layer adedi kadar layerdan oluşur.
-----------------------
container ayağa kaldırıldığı zaman w/r bir katman oluşur bu katman üzerinde uygulama çalışırken gerçekleşen değişiklikler kaydedilir container silinirse bu değişikliklerde kaybolur
bu önlenebilir data-volume?
----------------------------
docker CLI
--2 tool
docker cli client side--one of clients
docker daemon server side
--cli tarafından girilen komut ile docker daemon a istek atılır ve istenilen aksiyon gerçekleştirilir.
------------------------------
Docker Registry (image store)
image ile çalışan container işletim sistemi uygulama iin gerekli environment dotnet.sdk ver diğer kütüphaneleri barındırır.
---------------------------------
var olan imageler üzerine kendi uygulamamızın konfigürasyonlarını yaparak yeni image oluşturup bunu container ile ayağa kaldırıp çalıştırabiliriz.-- örnek asp.net core sdk image'i üzerinde.
-------------------------------

########### DOCKERFILE #################

1.uygulamayı linux contianerda çalıştıracağız bunun için image lazım microsoftun asp.net core imageını almak yeterli olacaktır çünkü bu image içinde zaten gerekli işletim sistemi mevcut ve bu işletim sisteminde asp.net core runtime frameworkü yüklü olarak hazırlanmış
2.uygulamayı çalıştırabilmek için asp.net core frameworku lazım =>
 dockerize edeceğimiz uygulama release modda olduğu için bu uygulamayı çalıştırmak için asp.net core runtime yeterli olacaktır - sdk yüklemeye gerek yok

3.docker-hub dan .net core runtime image
--docker pull mcr.microsoft.com/dotnet/core/runtime:3.1 ile image çekilir burada "runtime:3.1" ile image-registry deki "mcr.microsoft.com/dotnet/core/runtime" bu image in "3.1" versiyonlu olanı çekeceğimizi tag ile belirtiriz versiyon verilmezse bu image'e ait en son versiyonu ":latest" tagı ile çekilir.

Docker File yazımı =>
docker file katmanlardan oluşur ve yazacağımız bu file ile imageımızı oluşturmuş olacağız
Base image: 1. katman
#FROM mcr.microsoft.com/dotnet/core/runtime-- burada from dan sonra belirtilen image üzerinde çalışacağımız yani bizim imageımızı bu image üzerine yazacağımızı belirtiyoruz.
bu image içinde gerekli işletim sistemi mevcut ve bu işletim sisteminde asp.net core runtime frameworkü yüklü olarak hazırlanmış

2.katman
#WORKDIR /app -- image içinde bir app klasörü oluşturur ve burada çalışacağımız belirtiriz

3.katamn
#COPY bin/Release/netcoreapp3.1/publish /app/
--info(burada docker file uygulamanın root klasöründe olduğu için gidecğimiz klasörlerle aynı seviyede ve buna göre klasör pathleri yazılacak)
--yapılacak iş git uygulamayı belirtilen pathden(bin/Release/netcoreapp3.1/publish) al ve image içindeki klasöre(app) kopyala
"bin/Release/netcoreapp3.1/publish" burada publish edilmiş uygulama assemblyimiz build edildikten sonra oluşan dll ve exe yapısıyla mevcut bize burada dll lazım çünkü başka bir uygulama içinde çalıştırılacaksa dll(dynamic link library) halinde impelente edilmesi lazım.

4.katman
ENTRYPOINT ["dotnet","DockerConsole.dll"]-- imagedan bir container ayağa kalktığı zaman çalışacak kodu belirtiyoruz giriş noktası imagedaki app klasöründe çalıştığımız için buradaki DockerConsole.dll i dotnet komutu ile çalıştıracağız

docker file ile image oluşturuldu

################ DOCKER IMAGE ######################################

- docker build -t dockerconsoleapp:v1(:v1 ile image versiyonu verebiliriz) . -- "." ile dockerfile ın bulunduğumuz dizinde olduğunu belirtip bu dockerfileden dockerconsoleapp adında bir image oluşturuyoruz
- docker images ile local registrydeki imagelarımızı görebiliriz 

############# DOCKER CONTAINER ######################################
### CLI ###
  RUN
--docker run dockerconsoleapp:v1  ile direk olarak iamge ile container oluşturulur ve çalışır (create + start)
--docker run --name consoleapp_container3 dockerconsoleapp:v1 
--docker run --rm --name consoleapp_container3 dockerconsoleapp:v1 #image dan container ayağa kaldır çalışma bitince containerı sil / container stop edilirsede silinir

--docker create --name container_name image_name # ile isim verilerek containerda oluşturulabilir
--docker ps  # çalışan containerlar 
--docker ps -a  # mevcut containerlar
--docker start -a dockerconsoleapp_container # containerı çalıştır -a eklenirse uygulama çıktısı consoleda görünür 
--docker stop dockerconsoleapp_container # container ı durdur
--docker rm dockerconsoleapp_container # containerı sil
--docker rmi dockerconsoleapp:v1 # image sil

--image ve container isimlerinin kullanıldığı yerlerde image id ve container id verilerek de komutlar çalıştırılabilir id lerin ilk 3 karakterini yazmak yeterli olacaktır
--image a bağlı çalışan container varsa "-force" ile silinemez image, containerlar durmuş halde ise "-force" ile image silinebilir
docker rmi dockerconsole:v1 --force 
--image a bağlı container yoksa docker rmi name/id ile direkt olarak silinebilir

--container ayakta ise container -force edilerek silinir
 docker rm name --force     
--container çalışmıyorsa docker rm name/id ile direkt silinebilir

--docker pull mcr.microsoft.com/dotnet/core/sdk:3.1
--dockerhub da image repository açıp imageın farklı versiyonlarını burada tutabiliriz
docker tag local-image:tagname new-repo:tagname # local repodaki(registry) imageı referans alıp göndereceğimiz repository adına uygun bir image olusturuyoruz 
docker push new-repo:tagname

docker tag holadocker yavsyl/holadockeramigo:v1
docker push yavsyl/holadockeramigo:v1

--docker login ile cli dan login olunabilir dockerhub a

#https://docs.docker.com/engine/reference/commandline/cli/ docker cli commands

-----------------------------------
########## PORT ######################
docker run -p 5000:80 mvcimage:v1 #bizim os-windowsdaki 5000 portunu çalışan docker containerın linux-os in 80 portuna yönlendiriyoruz
docker run -d -p 5001:80 --name mvcontainer mvcimage:v1 -- '-d' ile detach olarak container ayağa kaldırılır console ekranında container çıktısını görmeyiz

########### CORE CLI ##############
https://docs.microsoft.com/tr-tr/dotnet/core/tools/

docker file içinde dotnet komutlarının çalıştırılması 
1. gereksinim => dotnet komutlarının çalışması için docker cli gerekli docker cli da dotnet core un sdk imageının içinde mevcut.
https://hub.docker.com/_/microsoft-dotnet-core-sdk/
2.örnek file içinde projeyi publish etme komutu çalıştırılarak daha önceden projeyi manuel publish etmeye gerek kalmayacak

from=> sdk  # image ı ile değiştirilir imageımızı sdk imageı üzerine kuruyoruz
WORKDIR /app # image içinde app klasöründe çalışacağımızı belirtiyoruz burada app yoksa yeniden oluşturulur
COPY . . # ilk "." ile dockerfile ın buldunuğu dizini ifade eder ikinci nokta "." ile ilk noktada belirtilen tüm dosyalar kopyalanacak imageımızın içindeki /app klasörü altına
mantık ilkini al ikinciye kopyala
RUN dotnet restore # ile projemizdeki packageleri restore eder yeniler-yeniden yükler-sikinti varsa yeniler
RUN dotnet publish DockerMvc.csproj -c Release -o out # bulunulan dizinde DockerMvc.csproj u /app klasörü içindeki out klasörü altına publish edeceke release modda  /out denilirse /app klasöründen çıkar dışarda out klasörü oluşturur
WORKDIR out --publish edilmiş uygulama out içinde oludğundan çalışma directoryimiz /app/out olacak 
ENV ASPNETCORE_URLS="http://*:4500" defaultta dotnet core sdkyi içinde uygulamanın çalışacağı ortam localhost olarak verilmiş ama oluşturduğumuz imageın localhostta çalışmasını istemiyoruz
"*" ile hangi ip de çalışacaksa çalışsın container içinde 4500 portunda çalışacağını belirtiyoruz
ENTRYPOINT ["dotnet","DockerMvc.dll"] uygulamayı ayağa kaldır


###### MultiStage Build & Optimizations ###########
Dockerfile da 1 den fazla baseimagein kullanılması
imagemızı sdk üzerine kurup uygulamayı dotnet cli ile restore ve publish ettikten sonra uygulamayı dotnet core runtime üzerinde çalıştıracağız sebebi ise image boyutunu küçültmek istememiz.
.
.
.
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1 --- runtime image
WORKDIR /app --- runtime image içinde /app klasörü aç
COPY --from=build /app/out . ---uygulamayı publish ettiğimiz alias olarak build atadğımız image içindeki /app/out dizinindeki dosyaları yeni runtime imageı içinde açtığımız /app altına kopyala
.
.
.
WORKDIR out demeye gerek yok artık yeni image da /app altında çalışacak

#PROEJDE DEĞİŞİKLİK 
#######
COPY *.csproj .
RUN dotnet restore
COPY . .
#anladığım şu eski sadece COPY . . yazınca her değişklikte tekrar dan koyalayacak 
yeni halde sadece statik dosyalarada(css image) gibi değişiklik olunca COPY *.csporj ile proje dosyası cacheden gelecek
eğer uygulamaya class eklenirse COPY . . ile statikler cache den COPY *.csproj ile yeni hali tekrardan kopyalancak 

dockerfile son hali  => 
################################################
#1
FROM mcr.microsoft.com/dotnet/core/sdk:3.1 as build
WORKDIR /app
COPY *.csproj .
RUN dotnet restore
COPY . .
RUN dotnet publish DockerMvc.csproj -c Release -o out
#2
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1
WORKDIR /app
COPY --from=build /app/out .
ENV ASPNETCORE_URLS="http://*:4500"
ENTRYPOINT ["dotnet","DockerMvc.dll"]
#################################################
1.imageda sdk imageı üzerinde uygulamayı restore edip publish ediyoruz
2.imageda 1.imagedaki publish edilmiş uygulamayı alıp runtime imageında çalıştırıyoruz dockerfiledan image oluşturulup container ayağa kalkınca 2.imagemız çalışacak

#### DOCKER IGNORE ############
image içine atılmasını istenmeyen dosyaları yoksayar 
örnek proejinin publish edilmiş halini kullandığımız için bin ve obj klasörlerine ihtiyaç yok bunları image içine atmamıza gerek yok 

## DOCKER VOLUME ####
Docker containerlar tarafından üretilen dataların kalıcı olmasını sağlar
bind mount => containerlarda kaydedilen verilerin containerın çalıştırıldığı hostta ki os içine kaydedilmei, tüm containerlar buradaki verileri ortak kullanabilirler okuma ve yazma
volume => veriler docker içinde dosya sistemi oluşturularak buraya kaydedilir docker cli üzerinden,
bind-mount a göre daha kolay ve pratiktir docker cli ile yönetilebilidiği için
volume leri cloud tarafında farklı serverlarda da tutmak mümkün bind-mountta böyle birşey mümkün değil
tmpfs mount => os üzerinde memorye kaydedilir veriler

#####
docker build --no-cache  -t holadocker:v4 . ## --no-cache ile imageı dockerfiledan oluştururken image layerlarını cacheden almadan tekrardan oluşturur
#####

########## Bind-Mount #########
containerlarda yapılan veri değişiklikleri os açılan bir klasör üzerinden okuma ve yazma işlemleri gerçekleştirilecek
bunun için ilk olarak dockera settingsden klasöre erişebilmesi için izin verilmesi gerekiyor

docker run -d -p 5000:4500 --name holacon1 --mount type=bind,source="C:\Users\yavuz\Desktop\pics",target="/app/wwwroot/images" holadocker:v4
--source containerin os de hangi dizin ile bind edileceği belirtilir
--target containerdaki uygulama içinde hangi dizin ile bind edileceği
container ayapa kaldırılırken bind işlemi gerçekleştirilmiş oldu


#### VOLUME ####
farklı serverlarda volumeler oluşturularak verileri kaydedebiliriz
volumeler docker üzerinde oluşturulur docker cli ile yönetilebilmesinden ve farklı ortamlarda volume oluşturma gibi özelliklerinden dolayı -
volumeler bind-mount a göre daha avantajlıdırlar
-docker volume create images --images adında bir volum oluşturulur

docker run -d -p 5000:4500 --name holacon1 -v images:/app/wwwroot/images holadocker:v4  container içindeki images klasörü ile oluşturduğumuz images volume ü bind ediyoruz.
-container ayağa kalkarken uygulamada target dizin altındaki verileri direkt olarak volume içine kopyalar